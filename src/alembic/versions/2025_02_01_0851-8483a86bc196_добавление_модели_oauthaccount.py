"""Добавление модели OAuthAccount

Revision ID: 8483a86bc196
Revises: 7830788a5ff2
Create Date: 2025-02-01 08:51:46.626509

"""

import uuid
from datetime import datetime, timezone
from typing import Sequence, Union
from sqlalchemy.dialects.postgresql import UUID

from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, String, TIMESTAMP

# revision identifiers, used by Alembic.
revision: str = "8483a86bc196"
down_revision: Union[str, None] = "7830788a5ff2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "oauth_providers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_oauth_providers")),
        sa.UniqueConstraint("id", name=op.f("uq_oauth_providers_id")),
    )
    oauth_providers_table = table(
        "oauth_providers",
        column("id", UUID),
        column("name", String),
        column("created_at", TIMESTAMP(timezone=True)),
    )
    op.bulk_insert(oauth_providers_table, [
        {"id": str(uuid.uuid4()), "name": "yandex", "created_at": datetime.now(timezone.utc)},
    ])
    op.create_table(
        "oauth_accounts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("provider_id", sa.UUID(), nullable=False),
        sa.Column("provider_user_id", sa.String(), nullable=True),
        sa.Column("access_token", sa.String(), nullable=True),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("expires_at", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["oauth_providers.id"],
            name=op.f("fk_oauth_accounts_provider_id_oauth_providers"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_oauth_accounts_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_oauth_accounts")),
        sa.UniqueConstraint("id", name=op.f("uq_oauth_accounts_id")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("oauth_accounts")
    op.drop_table("oauth_providers")
    # ### end Alembic commands ###
